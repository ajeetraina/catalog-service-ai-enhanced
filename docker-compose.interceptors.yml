# Docker Compose with MCP Interceptors for Catalog Service AI Enhanced
version: '3.8'

services:
  # ============================================================================
  # MCP GATEWAY WITH INTERCEPTORS
  # ============================================================================
  mcp-gateway:
    image: docker/mcp-gateway:latest
    container_name: catalog-mcp-gateway
    ports:
      - "8811:8811"
    environment:
      - RUST_LOG=info
      - MCP_GATEWAY_PORT=8811
      - MCP_GATEWAY_HOST=0.0.0.0
      - SECURITY_LEVEL=strict
      - AUDIT_ENABLED=true
    command: >
      --transport=streaming
      --port=8811
      --servers=github,brave,wikipedia
      
      # BEFORE INTERCEPTORS (Security First)
      --interceptor=before:exec:echo "üõ°Ô∏è  SECURITY CHECK - Query: $$(jq -r '.params.arguments.query // "none"' <<< '$$TOOL_CALL_JSON') - User: $$(jq -r '.meta.sessionId // "anonymous"' <<< '$$TOOL_CALL_JSON')" >&2
      --interceptor=before:exec:/scripts/rate-limiter.sh
      --interceptor=before:http:http://security-interceptor:8080/validate
      
      # AFTER INTERCEPTORS (Data Processing)
      --interceptor=after:docker:catalog-content-analyzer:latest analyze
      --interceptor=after:http:http://audit-interceptor:8080/log
      --interceptor=after:exec:/scripts/audit-logger.sh
    volumes:
      - ./interceptors/scripts:/scripts:ro
      - /tmp/mcp-sessions:/tmp/mcp-sessions:rw
      - /var/log/mcp:/var/log/mcp:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - security-interceptor
      - audit-interceptor
    networks:
      - catalog-network
    restart: unless-stopped

# Create a smart integration script that reads the existing compose file
cat > integrate-interceptors.py << 'EOF'
#!/usr/bin/env python3
"""
Smart Integration Script for MCP Interceptors
Analyzes existing docker-compose.yml and creates enhanced version
"""
import yaml
import sys
import os
import json

def analyze_existing_compose():
    """Analyze the existing docker-compose.yml structure"""
    if not os.path.exists('docker-compose.yml'):
        print("‚ùå No docker-compose.yml found in current directory")
        return None
    
    try:
        with open('docker-compose.yml', 'r') as f:
            data = yaml.safe_load(f)
        
        analysis = {
            'has_version': 'version' in data,
            'services': list(data.get('services', {}).keys()),
            'networks': list(data.get('networks', {}).keys()),
            'volumes': list(data.get('volumes', {}).keys()),
            'mcp_gateway': None,
            'model_runner': None,
            'existing_tools': []
        }
        
        # Find MCP Gateway service
        services = data.get('services', {})
        for service_name, config in services.items():
            image = config.get('image', '')
            command = config.get('command', '')
            
            if 'mcp-gateway' in image or 'mcp-gateway' in service_name.lower():
                analysis['mcp_gateway'] = {
                    'name': service_name,
                    'config': config,
                    'has_servers': '--servers' in str(command),
                    'has_tools': '--tools' in str(command),
                    'servers': [],
                    'tools': []
                }
                
                # Extract servers and tools from command
                if isinstance(command, str):
                    if '--servers=' in command:
                        servers_part = command.split('--servers=')[1].split()[0]
                        analysis['mcp_gateway']['servers'] = servers_part.split(',')
                    if '--tools=' in command:
                        tools_part = command.split('--tools=')[1].split()[0]  
                        analysis['mcp_gateway']['tools'] = tools_part.split(',')
            
            # Check for model runner
            if 'model-runner' in image or 'model' in service_name.lower():
                analysis['model_runner'] = {
                    'name': service_name,
                    'config': config
                }
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå Error analyzing docker-compose.yml: {e}")
        return None

def create_interceptor_enhancement(analysis):
    """Create interceptor services that integrate with existing setup"""
    
    if not analysis:
        print("‚ùå Cannot create enhancement without analysis")
        return False
    
    # Read the original compose file
    with open('docker-compose.yml', 'r') as f:
        original_data = yaml.safe_load(f)
    
    # Determine network name (use existing or default)
    network_name = analysis['networks'][0] if analysis['networks'] else 'default'
    
    # Add interceptor services
    interceptor_services = {
        'security-interceptor': {
            'build': './interceptors/http/security-service',
            'container_name': 'catalog-security-interceptor',
            'ports': ['8080:8080'],
            'environment': [
                'SECURITY_MODE=${SECURITY_MODE:-strict}',
                'MAX_QUERY_LENGTH=${MAX_QUERY_LENGTH:-500}',
                'RATE_LIMIT_RPM=${RATE_LIMIT_RPM:-60}',
                'LOG_LEVEL=${LOG_LEVEL:-info}'
            ],
            'volumes': ['/var/log/mcp:/var/log/mcp:rw'],
            'networks': [network_name] if network_name != 'default' else None,
            'healthcheck': {
                'test': ['CMD', 'curl', '-f', 'http://localhost:8080/health'],
                'interval': '10s',
                'timeout': '5s',
                'retries': 3
            },
            'restart': 'unless-stopped'
        },
        
        'audit-interceptor': {
            'build': './interceptors/http/audit-service',
            'container_name': 'catalog-audit-interceptor', 
            'ports': ['8081:8080'],
            'environment': [
                'AUDIT_MODE=${AUDIT_MODE:-full}',
                'COMPLIANCE_RULES=${COMPLIANCE_RULES:-pii_detection,sensitive_data}'
            ],
            'volumes': ['/var/log/mcp:/var/log/mcp:rw'],
            'networks': [network_name] if network_name != 'default' else None,
            'healthcheck': {
                'test': ['CMD', 'curl', '-f', 'http://localhost:8080/health'],
                'interval': '15s',
                'timeout': '5s',
                'retries': 3
            },
            'restart': 'unless-stopped'
        },
        
        'content-analyzer': {
            'build': './interceptors/docker/content-analyzer',
            'image': 'catalog-content-analyzer:latest',
            'container_name': 'catalog-content-analyzer',
            'environment': [
                'ANALYSIS_MODEL=${ANALYSIS_MODEL:-sentiment,quality}',
                'CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.8}'
            ],
            'networks': [network_name] if network_name != 'default' else None,
            'profiles': ['tools'],
            'restart': 'unless-stopped'
        }
    }
    
    # Add monitoring services
    monitoring_services = {
        'prometheus': {
            'image': 'prom/prometheus:latest',
            'container_name': 'catalog-prometheus',
            'ports': ['9090:9090'],
            'volumes': [
                './monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro',
                'prometheus_data:/prometheus'
            ],
            'command': [
                '--config.file=/etc/prometheus/prometheus.yml',
                '--storage.tsdb.path=/prometheus',
                '--web.enable-lifecycle'
            ],
            'networks': [network_name] if network_name != 'default' else None,
            'restart': 'unless-stopped'
        },
        
        'grafana': {
            'image': 'grafana/grafana:latest',
            'container_name': 'catalog-grafana',
            'ports': ['3000:3000'],
            'environment': [
                'GF_SECURITY_ADMIN_USER=admin',
                'GF_SECURITY_ADMIN_PASSWORD=admin'
            ],
            'volumes': ['grafana_data:/var/lib/grafana'],
            'depends_on': ['prometheus'],
            'networks': [network_name] if network_name != 'default' else None,
            'restart': 'unless-stopped'
        }
    }
    
    # Merge services
    enhanced_data = original_data.copy()
    enhanced_data['services'].update(interceptor_services)
    enhanced_data['services'].update(monitoring_services)
    
    # Add volumes if they don't exist
    if 'volumes' not in enhanced_data:
        enhanced_data['volumes'] = {}
    enhanced_data['volumes'].update({
        'prometheus_data': None,
        'grafana_data': None
    })
    
    # Enhance MCP Gateway if found
    if analysis['mcp_gateway']:
        gateway_name = analysis['mcp_gateway']['name']
        gateway_service = enhanced_data['services'][gateway_name]
        
        # Add interceptor volumes
        if 'volumes' not in gateway_service:
            gateway_service['volumes'] = []
        
        interceptor_volumes = [
            './interceptors/scripts:/scripts:ro',
            '/tmp/mcp-sessions:/tmp/mcp-sessions:rw',
            '/var/log/mcp:/var/log/mcp:rw',
            '/var/run/docker.sock:/var/run/docker.sock:ro'
        ]
        
        for vol in interceptor_volumes:
            if vol not in gateway_service['volumes']:
                gateway_service['volumes'].append(vol)
        
        # Add dependencies
        if 'depends_on' not in gateway_service:
            gateway_service['depends_on'] = []
        elif isinstance(gateway_service['depends_on'], dict):
            gateway_service['depends_on'] = list(gateway_service['depends_on'].keys())
        
        for dep in ['security-interceptor', 'audit-interceptor']:
            if dep not in gateway_service['depends_on']:
                gateway_service['depends_on'].append(dep)
        
        # Add interceptor configuration to command
        if 'command' in gateway_service:
            existing_command = gateway_service['command']
            if isinstance(existing_command, list):
                existing_command = ' '.join(existing_command)
            
            # Preserve existing servers and tools, add interceptors
            interceptor_flags = [
                '# Interceptor configuration',
                '--interceptor=before:exec:echo "üõ°Ô∏è INTERCEPTOR: Query=$(jq -r \'.params.arguments.query // \"none\"\' <<< \'$TOOL_CALL_JSON\')" >&2',
                '--interceptor=before:exec:/scripts/rate-limiter.sh',
                '--interceptor=before:http:http://security-interceptor:8080/validate',
                '--interceptor=after:docker:catalog-content-analyzer:latest analyze',
                '--interceptor=after:http:http://audit-interceptor:8080/log',
                '--interceptor=after:exec:/scripts/audit-logger.sh'
            ]
            
            # Add interceptor flags to existing command
            enhanced_command = existing_command
            for flag in interceptor_flags:
                if not flag.startswith('#'):  # Skip comments
                    enhanced_command += f' \\\n      {flag}'
            
            gateway_service['command'] = enhanced_command
        
        print(f"‚úÖ Enhanced MCP Gateway service: {gateway_name}")
        print(f"   Preserved existing servers: {analysis['mcp_gateway']['servers']}")
        print(f"   Preserved existing tools: {analysis['mcp_gateway']['tools']}")
    
    # Remove version field if it exists (deprecated)
    if 'version' in enhanced_data:
        del enhanced_data['version']
        print("‚úÖ Removed deprecated 'version' field")
    
    # Write enhanced compose file
    try:
        with open('docker-compose.interceptors.yml', 'w') as f:
            yaml.dump(enhanced_data, f, default_flow_style=False, sort_keys=False, indent=2)
        
        print("‚úÖ Created enhanced compose file: docker-compose.interceptors.yml")
        return True
        
    except Exception as e:
        print(f"‚ùå Error writing enhanced compose file: {e}")
        return False

def main():
    print("üîç Analyzing your existing Docker Compose setup...")
    
    analysis = analyze_existing_compose()
    if not analysis:
        return False
    
    print(f"‚úÖ Found {len(analysis['services'])} existing services")
    
    if analysis['mcp_gateway']:
        gateway_info = analysis['mcp_gateway']
        print(f"‚úÖ Found MCP Gateway: {gateway_info['name']}")
        print(f"   Servers: {gateway_info['servers']}")
        print(f"   Tools: {gateway_info['tools']}")
    else:
        print("‚ö†Ô∏è  No MCP Gateway found - will add interceptor services only")
    
    if analysis['model_runner']:
        print(f"‚úÖ Found Model Runner: {analysis['model_runner']['name']}")
    
    print(f"‚úÖ Networks: {analysis['networks']}")
    print(f"‚úÖ Volumes: {analysis['volumes']}")
    
    print("\nüîß Creating interceptor enhancement...")
    success = create_interceptor_enhancement(analysis)
    
    if success:
        print("\nüéâ Integration complete!")
        print("   ‚úÖ Your existing services are preserved")
        print("   ‚úÖ Interceptor services added")
        print("   ‚úÖ MCP Gateway enhanced with interceptors")
        print("   ‚úÖ Monitoring services added")
        print(f"   ‚úÖ Original backed up as: docker-compose.yml.backup")
        return True
    else:
        print("\n‚ùå Integration failed")
        return False

if __name__ == "__main__":
    main()
